/**
 * OVERVIEW:
 *
 * Will get list of issue keys from a pre-defined JQL
 * For each key, it will get certain field values
 *   If an issue is linked to an epic, it will get epic name
 *   It will then get all worklog details
 * All of which will be consolidated into one json/object
 * The json data will then be pushed to data.world
 *   This is so because we can't push directly to excel online this time
 * On the excel file, it will just import the uploaded data
 *   via data.world excel add-in
 */
const fetch = require('node-fetch');
global.Headers = fetch.Headers;
var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
const { Parser } = require('json2csv');
const json2csvParser = new Parser();
const fs = require('fs');
const dateFormat = require('dateformat');

var allWorkLogs = [];

const jiraToken = 'Basic a2F0cmluYS5xdWl0b0BsZWdhbG1hdGNoLmNvbTpaY2xoNlpJSnBPTGNIbHBIVzRub0EwRjA=';
// token is generated by this command: echo -n [JIRA userid]:[JIRA user API token] | base64
// note: JIRA API token is created at https://id.atlassian.com/manage/api-tokens

const JIRA_FILTER = process.argv.find((a) => a.includes('--filter='));
jiraFilterId =
    JIRA_FILTER === undefined || JIRA_FILTER.replace('--filter=', '') === ''
        ? 21755
        : JIRA_FILTER.replace('--filter=', '');
// const jiraFilterId = 21755;
// https://legalmatch.atlassian.net/issues/?filter=21742 <= Business Area Mapping
// https://legalmatch.atlassian.net/issues/?filter=21755 <= Worklog Mapping

// getting issue details
const epicLinkField = 'customfield_10008';
const epicNameField = 'customfield_10009';
const teamNameField = 'customfield_11901';

// Common code block: fetchGet
async function fetchGet(url) {
    console.log(url);
    let response = await fetch(url, {
        headers: new Headers({
            Authorization: jiraToken
        })
    });
    let jsonResponse = await response.json();
    return jsonResponse;
}

// Function that gets the list of JIRA Keys from a predefined JIRA filter
// Returns: list of JIRA Keys in an array
async function getFilterData(jiraFilterId, startAt = 0, maxResults = 10000) {
    var getFilterDatasUrl = `https://legalmatch.atlassian.net/rest/api/3/search?jql=filter%3D${jiraFilterId}&startAt=${startAt}&maxResults=${maxResults}&fields=key`;
    // note: maxResults maximum limit is 10000 if id and key is only requested
    //       may need to revise this to paginate when total records exceeds the limit
    //       when paginating, we can loop startAt at 10000 increments
    //       for now, startAt is pegged at 0
    // reference: https://developer.atlassian.com/cloud/jira/platform/rest/v3/?_ga=2.168505897.925522852.1573788582-1352174180.1573178126#api-rest-api-3-search-get

    let jsonResponse = await fetchGet(getFilterDatasUrl);
    let issues = await jsonResponse.issues;
    return issues.map((issue) => {
        return issue.key;
    });
}

// Function that gets business area custom field Ids for a given JIRA key
// Returns: JIRA business area custom field Ids (customfield_xxxxx)
function getBusinessAreaCustomFieldId(jiraKey) {
    var businessAreaField;

    if (jiraKey.includes('DES')) {
        businessAreaField = 'customfield_13981';
    } else if (jiraKey.includes('SM')) {
        businessAreaField = 'customfield_13979';
    } else {
        businessAreaField = 'customfield_13952';
    }
    return businessAreaField;
}

// Function that gets project name custom field Ids for a given JIRA key
// Returns: JIRA project name custom field Ids (customfield_xxxxx)
function getProjectNameCustomFieldId(jiraKey) {
    var projectNameField;

    if (jiraKey.includes('DES')) {
        projectNameField = 'customfield_13982';
    } else if (jiraKey.includes('SM')) {
        projectNameField = 'customfield_13980';
    } else {
        projectNameField = 'customfield_13959';
    }
    return projectNameField;
}

// Function that gets issues details for a given JIRA key
// Returns: details in JSON format
async function getIssueDetails(jiraKey) {
    var businessAreaField = getBusinessAreaCustomFieldId(jiraKey);
    var projectNameField = getProjectNameCustomFieldId(jiraKey);
    var fieldParams = `fields=key,summary,parent,${businessAreaField},${projectNameField},${epicLinkField},${epicNameField},${teamNameField}`;

    var getIssueUrl = `https://legalmatch.atlassian.net/rest/api/3/issue/${jiraKey}?${fieldParams}`;
    // reference: https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issue-issueIdOrKey-get

    let jsonResponse = await fetchGet(getIssueUrl);
    jsonResponse.fields.key = jsonResponse.key;
    return jsonResponse.fields;
}
// Function that gets worklog entries for a given JIRA Key
// Returns: worklogs in JSON format
async function getIssueWorklogs(jiraKey) {
    let workLogs = [],
        jsonResponse,
        unretrievedLen,
        retrievedLen = 0,
        defMaxResult = 5000;
    // reference: https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issue-issueIdOrKey-worklog-get

    do {
        jsonResponse = await fetchGet(
            `https://legalmatch.atlassian.net/rest/api/3/issue/${jiraKey}/worklog?startAt=${retrievedLen}`
        );
        retrievedLen += defMaxResult;
        unretrievedLen = jsonResponse.total - retrievedLen;
        workLogs = workLogs.concat(jsonResponse.worklogs);
    } while (unretrievedLen > 0);

    let cleanWorkLogs = workLogs.map((logEntry) => {
        let e = {};

        e['worklogId'] = logEntry.id;

        e['issueKey'] = jiraKey;

        // since author.name is no longer availalbe from REST API
        // e['author'] = logEntry.author.name;
        e['author'] = logEntry.author.emailAddress.replace('@legalmatch.com', '');

        e['started'] = logEntry.started.substring(0, 10);

        // convert 'started' date in month-year format as this is not yet doable on excel online
        var monthNames = [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec'
        ];
        e['dateInMonthYear'] =
            monthNames[parseInt(e['started'].slice(5, 7)) - 1] + '-' + e['started'].slice(0, 4);

        e['timeSpentInHours'] = (logEntry.timeSpentSeconds / 3600).toFixed(2);

        // convert time in seconds to hh:mm format
        hours = Math.floor(logEntry.timeSpentSeconds / 3600);
        hours < 10 ? (hours = `0${hours}`) : hours;
        logEntry.timeSpentSeconds %= 3600;
        minutes = Math.floor(logEntry.timeSpentSeconds / 60);
        minutes < 10 ? (minutes = `0${minutes}`) : minutes;
        e['timeSpent'] = `${hours}:${minutes}`;

        var getWorklogCommentText = function (obj, key) {
            if (obj.hasOwnProperty('text')) {
                return obj.text;
            }
            if (obj.hasOwnProperty('content')) {
                var commentText = getWorklogCommentText(obj.content[0], 'content');
                return commentText;
            } else {
                console.log('something is wrong');
                console.log(e['author']);
                console.log(obj);
                return '[EMPTY COMMENT]';
            }
        };

        if (logEntry.hasOwnProperty('comment')) {
            e['comment'] = getWorklogCommentText(logEntry.comment, 'text')
                .replace(new RegExp('<(.+?)>', 'g'), '')
                .replace(new RegExp('<>', 'g'), '')
                .trim();
        } else {
            e['comment'] = '[EMPTY COMMENT]';
        }

        const optionalActivityCodes = [
            'ACC',
            'COD',
            'DEV',
            'OPS',
            'REL',
            'TES',
            'INV',
            'PMC',
            'REQ',
            'TEC',
            'TPL-C',
            'TPL-E',
            'TPL-R',
            'TPL',
            'SPLA',
            'DASM',
            'SREV',
            'SRET',
            'BREF',
            'DANA',
            'RELT',
            'HKPG',
            'OVH',
            'SOF',
            'INS',
            'HAR',
            'ASI',
            'HLO',
            'SYM',
            'PCN'
        ];

        if (
            (e['comment'].includes('|') && e['comment'].match(/(^[A-Z]+)/)) ||
            e['comment'].match(/(^[A-Z][A-Z0-9\-\s]+$)/)
        ) {
            try {
                let description,
                    commentArr = e['comment'].split('|');
                e['activityCode'] = commentArr[0].replace(/[\s]+/g, '');
                description = commentArr[1] && commentArr[1].trim();

                if (
                    !optionalActivityCodes.includes(e['activityCode']) &&
                    (!description || description.length < 1)
                ) {
                    throw 'MISSING DESCRIPTION';
                }
            } catch (err) {
                e['activityCode'] = `[${err}]`;
            }
        } else if (e['comment'] == '[EMPTY COMMENT]') {
            e['activityCode'] = '[EMPTY COMMENT]';
        } else {
            e['activityCode'] = '[INVALID WORKLOG FORMAT]';
        }

        // determine activity group
        const activityGrouping = {
            Planning: [
                'PMC',
                'REQ',
                'INV',
                'TEC',
                'TPL',
                'TPL-E',
                'TPL-C',
                'TPL-R',
                'BREF',
                'COL',
                'PLN',
                'BRN',
                'MTC',
                'ANA',
                'MON',
                'P-ANA',
                'REV',
                'RES',
                'SCR',
                'SO-PM',
                'SO-ANSS',
                'SO-RES',
                'SPLA',
                'DASM',
                'SREV',
                'DANA',
                'RELT'
            ],
            'Dev&Test': ['DEV', 'TES', 'COD', 'ACC', 'REL', 'OPS'],
            Operation: [
                'DOC',
                'MEE',
                'TRA',
                'CON',
                'REC',
                'OTH',
                'HKPG',
                'REP',
                'SO-HKPNG',
                'SRET',
                'ONBO',
                'NNP',
                'OVH',
                'SOF',
                'INS',
                'HAR',
                'ASI',
                'HLO',
                'SYM',
                'PCN'
            ],
            OMT: ['M-ANSS', 'M-CPY', 'M-DSN', 'M-CRO', 'M-SEO'],
            'Bidding&Campaign': ['BID', 'E-CAM', 'PPC', 'SO-EC', 'SO-LP'],
            'Content&Design': [
                'AD-DSN',
                'BLO',
                'EMA',
                'YTU',
                'CONT',
                'DES',
                'DSN',
                'NWL',
                'PRO',
                'SCH-POS'
            ],
            Reporting: ['SO-REP'],
            'SystemUpdate&Maintenance': ['SO-SF', 'SO-CAU']
        };
        const getGroup = (grouping, value) => {
            return Object.keys(grouping).find((key) => grouping[key].indexOf(value) >= 0);
        };

        e['activityGroup'] = getGroup(activityGrouping, e['activityCode']);
        if (typeof e['activityGroup'] === 'undefined') {
            e['activityGroup'] = '[UNKNOWN ACTIVITY GROUP]';
        }

        // determine team assignment
        const teamMembers = {
            'Team Jupiter': [
                'alvin.magalona',
                'ariel.maniclang',
                'janpatrick.torres',
                'jayrome.vergara',
                'jody.guillen',
                'redentor.ambion',
                'ryan.eballar',
                'shalimar.manacap',
                'sherwin.villacin',
                'siegfred.balona',
                'winston.tan'
            ],
            'Team Saturn': [
                'albert.alinson',
                'johnclark.semblante',
                'jonvincent.mendoza',
                'kenneth.melicado',
                'maridel.roble',
                'mayanne.romanos',
                'nick.saducas',
                'shania.jubelag'
            ],
            'Team Neptune': [
                'cherylleslie.co',
                'christine.llanos',
                'dwight.cruz',
                'egie.garciano',
                'harvylouise.torres',
                'ingelbert.soronio',
                'janessa.quijano',
                'jennifer.durano',
                'jocelyn.bag-ao',
                'johnlloyd.sacay',
                'jolo.bracamante',
                'joshua.andrino',
                'juliene.malveda',
                'markpaul.daroy',
                'nino.balagtas',
                'rey.maranan',
                'reymart.oliverio',
                'roman.duetes',
                'roselie.romeo',
                'veronica.salvino',
                'yashii.yankin'
            ],
            'DevOps and IT Team': [
                'demetrio.delarosa',
                'janart.temblor',
                'mark.anthony',
                'rodolfo.piscos',
                'ryanphilip.lim',
                'sherwinjulius.abellanosa'
            ],
            'OMT Team': [
                'briancharlo.ang',
                'cesar.jucutan',
                'christian.capisan',
                'crestinafloren.deocampo',
                'dan.fernandez',
                'darwinbrian.canales',
                'daryll.garcia',
                'emee.miano',
                'fervic.deleon',
                'fritz.hortelano',
                'grace.milanbilen',
                'hunilex.rom',
                'jamaelafae.chua',
                'janry.sanchez',
                'jessabeth.forlales',
                'kareen.bughaw',
                'katrina.abacan',
                'kimberly.lucanas',
                'krissy.padlan',
                'le.gantuangco',
                'lexvyn.opolentisima',
                'lloyd.limbaga',
                'maricris.madara',
                'pauline.torrado',
                'remyjade.alvarez',
                'roel.rubi',
                'terence.casquejo',
                'yancy.oliveros'
            ],
            'Sales Ops': [
                'carllione.bacalso',
                'christine.cueva',
                'dangalephico.patalinghug',
                'dexieeunice.uy',
                'isaiahreuel.pepino',
                'jae.esteban',
                'jademaica.briones',
                'karen.romanillos',
                'kingedwin.zuniga',
                'kirk.pondar',
                'kirstennichole.orillo',
                'louis.tato',
                'mabelle.gajardo',
                'mark.miranda',
                'marycris.briones',
                'paolaluz.garrido',
                'phoebe.camacho',
                'raffie.navaluna',
                'steve.sanesteban'
            ],
            Automation: [
                'angela.liwag',
                'axxon.moulic',
                'criscarlo.dapitanon',
                'gladysmae.reyson',
                'katrina.quito',
                'noah.rojoca',
                'wilfred.escarda'
            ],
            'Team 1': [
                'allan.bernabe',
                'argell.ison',
                'frederick.go',
                'gilmcleen.paloma',
                'ian.lebumfacil',
                'jeena.limoran',
                'john.batulan',
                'kissy.gonzales',
                'laureano.boniel',
                'lester.tarranza',
                'richel.penuela'
            ],
            'Team 2': [
                'armilyn.gozon',
                'bbboyreynaldo.villagonzalo',
                'carlo.montoya',
                'christian.nabong',
                'mark.abregana',
                'martha.tiambeng',
                'melvin.ocampo',
                'syrah.arguilles'
            ],
            'Team 3': [
                'aeros.salaga',
                'alfie.pogado',
                'arsenio.tiu',
                'cedric.eduarte',
                'cedrick.lariosa',
                'ferlito.dayuday',
                'irvin.tanutan',
                'mhon.romero',
                'nino.lapura',
                'patrick.lopez'
            ],
            'Team 4': [
                'franklin.cutamora',
                'joana.satina',
                'johnlito.bardinas',
                'julius.masigan',
                'neil.sherwin.sepe',
                'precious.pacaldo',
                'sean.powell',
                'teodoro.albon',
                'wendell.madjus'
            ],
            'Team 5': [
                'alelie.sabado',
                'angelito.garcia',
                'chad.yuson',
                'chancellor.galiza',
                'donald.gavas',
                'michael.manzano',
                'nhel.bontuyan',
                'nikolai.pesochenskii',
                'orjanangelo.bognot',
                'raymond.hababag',
                'rhene.regis',
                'ronmichael.khu'
            ]
        };
        const getTeamAssignment = (team, value) => {
            return Object.keys(teamMembers).find((key) => teamMembers[key].includes(value));
        };

        e['teamAssignment'] = getTeamAssignment(teamMembers, e['author']);
        if (typeof e['teamAssignment'] === 'undefined') {
            e['teamAssignment'] = 'Others';
        }

        return e;
    });
    return cleanWorkLogs;
}

(async () => {
    const startTime = `Start Time: ${new Date().toString()}`;
    console.log(startTime);
    const keys = await getFilterData(jiraFilterId);
    keys.sort();

    for (const key of keys) {
        // if (key !== 'PLAN-235') { continue; } // for troubleshooting

        var row = { issueKey: key };

        const issueDetails = await getIssueDetails(key);

        Object.assign(row, {
            summary: issueDetails.summary,
            parent:
                issueDetails.parent === undefined ? issueDetails.parent : issueDetails.parent.key,
            epicLink: issueDetails[epicLinkField]
        });
        if (row.epicLink === null) {
            if (issueDetails[epicNameField] === null) {
                Object.assign(row, { epicName: null });
            } else {
                // this means the issue itself is an epic, hence, use its own epic name
                Object.assign(row, { epicName: issueDetails[epicNameField] });
            }
        } else {
            const epicDetails = await getIssueDetails(row.epicLink);
            Object.assign(row, { epicName: epicDetails[epicNameField] });
        }

        businessAreaField = getBusinessAreaCustomFieldId(key);
        if (
            (typeof issueDetails[businessAreaField] === 'object' ||
                typeof issueDetails[businessAreaField] === 'function') &&
            issueDetails[businessAreaField] !== null
        ) {
            Object.assign(row, { businessArea: issueDetails[businessAreaField].value });
        } else if (key.includes('LTOA')) {
            Object.assign(row, { businessArea: 'Shared' });
        } else {
            Object.assign(row, { businessArea: issueDetails[businessAreaField] });
        }

        if (
            (typeof issueDetails[teamNameField] === 'object' ||
                typeof issueDetails[teamNameField] === 'function') &&
            issueDetails[teamNameField] !== null
        ) {
            Object.assign(row, { teamName: issueDetails[teamNameField].value });
        } else {
            Object.assign(row, { teamName: issueDetails[teamNameField] });
        }

        projectNameField = getProjectNameCustomFieldId(key);
        if (
            (typeof issueDetails[projectNameField] === 'object' ||
                typeof issueDetails[projectNameField] === 'function') &&
            issueDetails[projectNameField] !== null
        ) {
            Object.assign(row, { projectName: issueDetails[projectNameField].value });
        } else {
            Object.assign(row, { projectName: issueDetails[projectNameField] });
        }

        if (issueDetails.key.includes('PLAN')) {
            projectName = issueDetails.summary;
        }

        // determining finalProjectName
        if (row.projectName !== null) {
            row.finalProjectName = row.projectName;
        } else if (row.epicName !== null && row.epicName !== undefined) {
            row.finalProjectName = row.epicName;
        } else if (key.includes('PLAN')) {
            row.finalProjectName = row.summary;
        } else if (key.includes('LTOA')) {
            row.finalProjectName = 'Trainings';
        } else {
            row.finalProjectName = `[ NO PROJECT NAME SET ]`;
        }

        // getting issue worklogs
        const logs = await getIssueWorklogs(key);
        for (const log of logs) {
            // finalize worklog row and push to allworklogs array
            Object.assign(log, row);
            // Don't push worklogs earlier than October 1, 2019
            if (new Date(log.started) >= new Date('2019-10-01')) {
                allWorkLogs.push(log);
                // console.log(log);
            }
            // process.stdout.write('.');
        }
    }

    // inherit epicLink, epicName, businessArea, projectName, finalProjectName from parent

    // get list of parent ids
    let parentList = [...new Set(allWorkLogs.map((item) => item.parent))];

    // remove undefined parent from list
    index = parentList.indexOf(undefined);
    if (index !== -1) parentList.splice(index, 1);

    // iterate through the parentList
    for (const parentKey of parentList) {
        console.log(parentKey);

        // get epicLink, epicName, businessArea, projectName, finalProjectName from parent
        const parentDetails = await getIssueDetails(parentKey);
        businessAreaField = getBusinessAreaCustomFieldId(parentKey);
        projectNameField = getProjectNameCustomFieldId(parentKey);
        epicLink = parentDetails[epicLinkField];

        if (epicLink !== null) {
            const epicDetails = await getIssueDetails(epicLink);
            epicName = epicDetails[epicNameField];
        } else {
            epicName = parentKey.includes('PLAN') ? parentDetails.summary : null;
        }
        businessArea =
            parentDetails[businessAreaField] !== null
                ? parentDetails[businessAreaField].value
                : null;

        if (epicName !== null) {
            projectName = epicName;
        } else {
            if (parentDetails[projectNameField] !== null) {
                projectName = parentDetails[projectNameField].value;
            } else {
                // if parent is an epic
                if (parentDetails[epicNameField] !== null) {
                    projectName = parentDetails[epicNameField];
                } else {
                    projectName = null;
                }
            }
        }

        finalProjectName = projectName !== null ? projectName : `[ NO PROJECT NAME SET ]`;

        allWorkLogs.map((allWorkLogs) => {
            if (allWorkLogs.parent == parentKey) {
                allWorkLogs.epicLink = epicLink;
                allWorkLogs.epicName = epicName;
                allWorkLogs.projectName = projectName;
                allWorkLogs.finalProjectName = finalProjectName;

                if (
                    allWorkLogs.businessArea &&
                    businessArea &&
                    !businessArea.includes('Shared') &&
                    allWorkLogs.businessArea != businessArea
                ) {
                    allWorkLogs.businessArea = `[ MISMATCHED ${allWorkLogs.issueKey} BA: ${allWorkLogs.businessArea} with PARENT ${parentDetails.key} BA: ${businessArea} ]`;
                }
            }
        });
    }

    const worklogs = { worklogs: allWorkLogs };
    console.log(`\nallWorkLogs Count: ${allWorkLogs.length}`);

    // output data to csv file
    const csv = json2csvParser.parse(allWorkLogs);

    csvFilename = `exportedWorklogs-filter=${jiraFilterId}_${dateFormat(
        new Date().toLocaleString('en-US', { timeZone: 'Asia/Manila' }),
        'yyyy-mm-dd_HHMM_dddd'
    )}.csv`;

    fs.writeFile(csvFilename, csv, function (err) {
        if (err) throw err;
        console.log(`Saving to ${csvFilename}`);
    });

    // upload data to data.world
    // reference: https://apidocs.data.world/api/files/uploadfile
    var xhr = new XMLHttpRequest();
    xhr.withCredentials = true;

    xhr.addEventListener('readystatechange', function () {
        if (this.readyState === this.DONE) {
            console.log(this.responseText);
        }
    });

    // data.world API params
    const owner = 'dwight';
    const id = 'worklogs';
    const file = 'worklogs.json';
    const token =
        'eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmR3aWdodCIsImlzcyI6ImFnZW50OmR3aWdodDo6NzA2ZDZhZGYtZmRmMC00OTAxLWI0YjgtMjEyNGZlMGZmZDI5IiwiaWF0IjoxNjAxMjc5ODkyLCJyb2xlIjpbInVzZXJfYXBpX3JlYWQiLCJ1c2VyX2FwaV93cml0ZSJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWUsInNhbWwiOnt9fQ.Zdla--IIq20-iJhtEE4UmzD-rMgYPeL5ixetlAmOX9aG4dO4wfzun-j9S-cN8yhWbPMClDZ8W-VTUCH-ri9xDg';
    // token can be taken from https://data.world/settings/advanced

    xhr.open('PUT', `https://api.data.world/v0/uploads/${owner}/${id}/files/${file}`);
    xhr.setRequestHeader('authorization', `Bearer ${token}`);
    xhr.send(JSON.stringify(worklogs));
    // console.log(worklogs)

    console.log(startTime);
    console.log(`End Time: ${new Date().toString()}`);
})();
